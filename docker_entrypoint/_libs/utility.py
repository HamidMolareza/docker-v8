import logging
from typing import Optional

from docker_environments import DockerEnvironments
from on_rails import Result, ValidationError, def_result

from docker_entrypoint._libs.ResultDetails.FailResult import FailResult

D8_Recommended_OPTIONS = {
    '--harmony': 'Enables support for some of the experimental ES6 features that are not yet fully standardized',
    '--allow-natives-syntax': 'Enables the use of V8-specific syntax in JavaScript code',
    '--trace-opt': 'Enables logging of V8\'s optimization process',
    '--print-bytecode': 'Prints the generated bytecode for JavaScript functions',
    '--print-opt-code': 'Prints the generated optimized machine code for JavaScript functions',
    '--trace': 'Enables detailed logging of V8 internals',
    '--log-timer-events': 'Enables logging of timer events',
    '--log-gc': 'Enables logging of garbage collection events',
    '--prof': 'Enables CPU profiling',
    '--trace-deopt': 'Enables logging of V8\'s deoptimization process',
    '--trace-ic': 'Enables logging of inline caching events',
}


@def_result()
def log_result(logger: logging.Logger, result: Result) -> Result:
    if result.success:
        return result
    if result.detail and result.detail is FailResult:
        return result

    log_error(logger, result) \
        .on_fail(lambda prev_result:
                 print(f"Error while logging details:\n{logger.error(repr(prev_result))}"))


@def_result()
def log_error(logger: logging.Logger, fail_result: Result) -> Result:
    if fail_result.success:
        return Result.fail(detail=ValidationError(message="Expected failure result but got success result!",
                                                  more_data=[fail_result]))

    logger.error(f"An error occurred:\n{repr(fail_result)}\n")
    return get_support_message() \
        .on_success(lambda support_message:
                    logger.info(f"Please report this error to help others who use this program.\n{support_message}")
                    )


@def_result()
def get_support_message() -> Result[str]:
    return DockerEnvironments.get_environments() \
        .on_success(_get_support_message)


@def_result()
def _get_support_message(environments: DockerEnvironments) -> Result[str]:
    return Result.ok(value="Support:\n"
                           f"\tMaintainer: {environments.maintainer}"
                           f"\tDocker Version: {environments.docker_version}"
                           f"\tBuild Date: {environments.build_date}"
                           f"\tRepository: {environments.vcs_url}"
                           f"\tReport Bug: {environments.bug_report}"
                     )


@def_result()
def log_debug_class_properties(logger: logging.Logger, class_object: object, message: Optional[str] = None) -> Result:
    result = f"{message}:\n" if message else ""
    for key, value in vars(class_object).items():
        result += f"\t{key}: {value}\n"
    logger.debug(result)
    return Result.ok()
